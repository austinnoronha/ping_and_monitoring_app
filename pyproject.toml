[tool.poetry]
name = "ping-and-monitoring-app"
version = "0.1.0"
description = "This project is designed to ping APIs at regular intervals to ensure their uptime and functionality. It is an open-source project, and contributions are welcome to help improve its features."
authors = ["Austin Noronha <austin_noronha@hotmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "*", from = "app"}]


[tool.poetry.dependencies]
python = "^3.9"
fastapi = "^0.115.0"
jinja2 = "^3.1.4"
requests = "^2.32.3"
typer = "^0.12.5"
python-dotenv = "^1.0.1"
httpx = "^0.27.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.7"
pre-commit = "^3.8.0"
black = "^24.8.0"
coverage = "^7.6.1"
darglint = "^1.8.1"
isort = "^5.13.2"
pytest = "^8.3.2"
ssort = "^0.13.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
    "tests"
]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120  # Set the maximum line length (similar to black or flake8)
target-version = "py39"  # Target Python version

[tool.ruff.lint.per-file-ignores]
# Ignore specific rules in certain files or directories
"tests/*" = ["F401"]  # Ignore unused imports in tests

# Enable specific rules or exclusions (optional)
# Uncomment and customize based on your project needs
# select = ["E", "F", "I", "N", "A"]
# ignore = []

[tool.ruff.lint]
extend-select = [
  "D",     # pydocstyle
  "E501",  # enforce line length
  "UP",    # pyupgrade
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.poetry.scripts]
ruff-lint = "ruff:check ."
ruff-fix = "ruff:fix ."

[tool.coverage.report]
fail_under = 80
show_missing = true

[tool.coverage.run]
command_line = "-m pytest -v"
omit = [
    "tests/*",
    # NOTE: the only reason why these are omitted is because this is a dummy
    # project - do not add random files to omit in real projects!:
    #"src/**.py",
    ".venv/*",
]
source = ["."]

[tool.isort]
profile = "black"
